=================
用Git进行版本管理
==================

在上面的一章讲到了如何书写文章，接下来面对的就是如何修改文章。

可能有人认为修改文章这件事很简单，重新打开编辑器，然后找到哪里需要修改然后改正不就可以了吗？

的确，面对一些简单的问题的时候这种修改方法确实可以，但是情况不如想象中那么简单。

---------------
修改文章面临的问题
----------------

.. 1、异地修改问题
   2、合并修改文件
   3、多人修改
   4、历史回溯或删除其中的某次修改
   5、资料保存冗余

当你写完一篇文章之后，可能最害怕的不是文章中的错别字语法错误或者结构的问题，而是担心辛辛苦苦写的一篇文章丢失。家里突然停电，电脑死机中毒，字处理软件无故崩溃等等都很容易造成一场灾难，为了防止这种事情出现你可能会在自己的电脑上备份好几份，可能会备份到移动存储上，可能会放到自己的网络硬盘上。

有时候，当你修改了文章之后，心满意足的关闭字处理软件之后你就会发现你曾经很满意的数据安全措施现在成了枷锁，每次当你修改了文章之后都需要把它们再次复制到移动存储，网络硬盘，或者在自己的硬盘上多复制几份。

可是，有些情况你会对你的修改反悔，这个时候事情就会变得让你很纠结。你会发现你有时候想要恢复到过去但是硬盘中并没有保存过去的备份，从此之后一狠心把每个版本的文档都保留了一遍并复制到各个备份位置。还有些时候，你可能想反悔曾经某一次的修改，而又不想删除后来的修改部分，这个时候就会变得无可奈何了，如果耐得住性子就只能手动复制粘贴，在几个版本的文章之间相互对比。

又经过了一段时间之后，你的一篇文章诞生了很多版本，即使你已经在备份之初就考虑到了用版本号和时间结合的方式进行文件的命名，但是在看到文件夹中繁多的版本时会是什么感觉呢？

这还是最简单的情况，如果牵扯到多人合作编写的话呢？或者一份书稿交给几个人审阅的时候呢？其中的工作量将会成倍增长，而且准确性也会大幅度降低。你的工作重心也不再是编写和修改文章的本身，而是被繁琐的操作卷入了泥潭。

而所有的这一切，用一个版本控制系统就可以完美的处理，而Git作为最流行最先进的版本管理系统，更是能够胜任这些任务并且能够带来更加完美的体验。

------------------
Git介绍
------------------

.. note:: 
   版本控制（Revision control）是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程式档案都得到同步。

Git是一个版本控制系统，版本控制主要应用在软件开发的过程之中，负责工程源代码的管理，源码的编写过程和文章的书写过程很相近，所以用Git管理我们书写的文本文档是没有任何问题的。



